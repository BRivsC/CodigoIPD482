---
description: 
globs: *.py
alwaysApply: false
---
# Adherencia a PEP 8 y Guías de Estilo en Python

- **PEP 8 como Estándar:** PEP 8 es la guía de estilo de código Python por excelencia. Su seguimiento mejora la legibilidad y la consistencia del código Python en diferentes proyectos y entre desarrolladores.
- **Uso de Linters:** Integra linters como `Flake8` o `Pylint` en tu entorno de desarrollo y pipeline de CI. Estos verifican el cumplimiento de PEP 8 y detectan posibles errores o "code smells".
    - Configura el linter para que sea estricto con las violaciones de PEP 8.
- **Uso de Formatters:** Utiliza formateadores automáticos como `Black`, `autopep8` o `YAPF` para asegurar que el código se ajuste automáticamente a las convenciones de PEP 8 (indentación, espaciado, longitud de línea, etc.).
    - `Black` es particularmente popular por ser "el formateador de código Python intransigente", lo que elimina debates sobre el estilo.
- **Convenciones Clave de PEP 8:**
    - **Indentación:** Usar 4 espacios por nivel de indentación. No usar tabuladores.
    - **Longitud de Línea:** Limitar las líneas a 79 caracteres (para código) o 72 (para docstrings/comentarios), aunque herramientas como Black suelen usar 88 por defecto.
    - **Líneas en Blanco:** Usar líneas en blanco para separar funciones, clases y bloques lógicos dentro de funciones.
    - **Importaciones:**
        - Las importaciones deben estar al principio del archivo, en líneas separadas.
        - Agrupar importaciones: primero librerías estándar, luego de terceros, y finalmente locales/de la aplicación.
        - Usar importaciones absolutas preferentemente.
    - **Nomenclatura:**
        - `snake_case` para funciones, métodos y variables.
        - `PascalCase` (o `CapWords`) para clases.
        - `UPPER_SNAKE_CASE` para constantes.
        - Módulos deben tener nombres cortos, en minúsculas, y pueden usar guiones bajos si mejora la legibilidad.
- **Ignorar Reglas Específicas (con Cautela):** Si hay una razón válida para desviarse de una regla de PEP 8, se puede indicar al linter que la ignore para una línea específica (ej. `# noqa: E501`), pero esto debe usarse con moderación y justificarse.

La consistencia en el estilo del código es crucial en proyectos grandes y colaborativos. Adherirse a PEP 8 reduce la carga cognitiva para los desarrolladores que leen el código, ya que pueden esperar un formato y estructura familiares. Esto facilita la comprensión, la revisión de código y el mantenimiento. Las herramientas automáticas hacen que el cumplimiento de PEP 8 sea sencillo y objetivo.

- **Ejemplo (Formateado por Black/PEP 8):**
  ```python
  # mal_estilo.py (antes de formatear)
  def miFuncion( parametro_uno, parametro_dos ):
   if parametro_uno==True and parametro_dos!=None:
    variable_muy_larga_para_demostrar_un_punto_sobre_la_longitud_de_linea_que_deberia_ser_cortada = parametro_uno + parametro_dos
    return variable_muy_larga_para_demostrar_un_punto_sobre_la_longitud_de_linea_que_deberia_ser_cortada
   else:
    return None

  import sys, os # Mal agrupado

  # buen_estilo.py (después de formatear con Black)
  import os
  import sys


  def mi_funcion(parametro_uno, parametro_dos):
      if parametro_uno is True and parametro_dos is not None:
          variable_muy_larga_para_demostrar_un_punto = (
              parametro_uno + parametro_dos
          )
          return variable_muy_larga_para_demostrar_un_punto
      else:
          return None # PEP 8 prefiere 'is' y 'is not' para singletons como True, False, None
