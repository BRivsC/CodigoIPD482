---
description: 
globs: 
alwaysApply: false
---
# Patrones de Diseño Comunes en Python para la Escalabilidad

Los patrones de diseño son soluciones probadas y reutilizables a problemas comunes que surgen durante el diseño de software. Su correcta aplicación puede llevar a un código más flexible, mantenible y comprensible. Python, con su naturaleza multiparadigma, permite la implementación de muchos patrones clásicos y también tiene sus propios "patrones idiomáticos".

- **Patrones Creacionales:**
    - **Factory Method (Método Fábrica):** Define una interfaz para crear un objeto, pero deja que las subclases decidan qué clase instanciar. Permite desacoplar el código cliente de las clases concretas.
    - **Abstract Factory (Fábrica Abstracta):** Proporciona una interfaz para crear familias de objetos relacionados o dependientes sin especificar sus clases concretas.
    - **Singleton (con Cautela):** Asegura que una clase tenga solo una instancia y proporciona un punto de acceso global a ella. Úsalo con precaución, ya que puede introducir estado global y dificultar las pruebas. En Python, a menudo se prefiere un módulo con estado a nivel de módulo.
    - **Builder (Constructor):** Separa la construcción de un objeto complejo de su representación, de modo que el mismo proceso de construcción pueda crear diferentes representaciones.
- **Patrones Estructurales:**
    - **Decorator (Decorador):** Añade dinámicamente nuevas funcionalidades a un objeto sin alterar su clase. Los decoradores de Python (`@decorator`) son una manifestación idiomática de este patrón.
    - **Adapter (Adaptador):** Permite que interfaces incompatibles trabajen juntas.
    - **Facade (Fachada):** Proporciona una interfaz unificada y simplificada a un conjunto de interfaces en un subsistema.