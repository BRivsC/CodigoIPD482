---
description: 
globs: 
alwaysApply: true
---
# Seguridad: No Hardcodear Secretos

- **Prohibición Absoluta:** Nunca se deben escribir contraseñas, tokens de acceso, claves de API, claves de encriptación u otra información confidencial directamente en el código fuente, archivos de configuración versionados o cualquier artefacto que se incluya en el control de versiones.[39, 40]
- **Alternativas Seguras:**
    - **Variables de Entorno:** Cargar secretos desde variables de entorno en el momento de la ejecución.
    - **Gestores de Secretos:** Utilizar servicios dedicados para la gestión de secretos (ej. HashiCorp Vault, AWS Secrets Manager, Azure Key Vault, Google Cloud Secret Manager).
    - **Archivos de Configuración No Versionados:** Si se usan archivos, deben estar fuera del control de versiones (ej. en `.gitignore`) y cargarse de forma segura.
- **Revisión de Código:** Durante las revisiones de código, prestar especial atención a la posible inclusión accidental de secretos.
- **Escaneo de Secretos:** Utilizar herramientas de escaneo de secretos (ej. GitGuardian, TruffleHog) en los pipelines de CI/CD para detectar secretos expuestos.

Incrustar secretos en el código fuente es una vulnerabilidad de seguridad grave y común. Si el código fuente se filtra, se compromete o se hace público (incluso accidentalmente), estos secretos quedan expuestos, permitiendo a los atacantes acceder a sistemas, datos y servicios protegidos. La gestión segura de secretos es un pilar fundamental de la seguridad de las aplicaciones.

- **Ejemplo (Conceptual - Qué NO hacer y qué SÍ hacer):**
  ```python
  # QUÉ NO HACER - SECRETO HARDCODEADO
  API_KEY = "esto_es_una_clave_secreta_muy_mala_idea_12345" 
  # db_password = "password123"

  def conectar_api_externa():
      # response = requests.get(f"[https://api.externa.com/data?key=](https://api.externa.com/data?key=){API_KEY}")
      pass

  # QUÉ SÍ HACER - USAR VARIABLES DE ENTORNO (Ejemplo)
  import os

  API_KEY_FROM_ENV = os.getenv("EXTERNAL_API_KEY")
  DB_PASSWORD_FROM_ENV = os.getenv("DATABASE_PASSWORD")

  if not API_KEY_FROM_ENV:
      raise ValueError("La variable de entorno EXTERNAL_API_KEY no está configurada.")

  def conectar_api_externa_segura():
      # response = requests.get(f"[https://api.externa.com/data?key=](https://api.externa.com/data?key=){API_KEY_FROM_ENV}")
      pass
  
  # Para ejecutar:
  # EXTERNAL_API_KEY="valor_real_de_la_api_key" python mi_script.py