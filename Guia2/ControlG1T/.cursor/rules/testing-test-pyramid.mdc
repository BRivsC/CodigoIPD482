---
description: Aconseja estructurar la suite de pruebas siguiendo la Pirámide de Pruebas: una base amplia de pruebas unitarias rápidas, menos pruebas de integración/servicio, y muy pocas pruebas E2E/UI lentas.
globs: 
alwaysApply: false
---
# Principios de la Pirámide de Pruebas

- **Granularidad y Cantidad:** La suite de pruebas debe tener múltiples capas con diferentes niveles de granularidad. La base de la pirámide debe estar compuesta por una gran cantidad de pruebas unitarias, seguidas por una cantidad menor de pruebas de integración o de servicio, y culminando con una cantidad muy pequeña de pruebas de extremo a extremo (E2E) o de interfaz de usuario (UI) en la cima.[37]
- **Velocidad de Ejecución y Feedback:** Las pruebas en la base (unitarias) deben ser muy rápidas de ejecutar, proporcionando feedback casi instantáneo. A medida que se asciende en la pirámide, las pruebas tienden a ser más lentas y costosas de ejecutar y mantener.
- **Aislamiento vs. Integración:** Las pruebas unitarias verifican pequeñas piezas de código de forma aislada (a menudo usando mocks/stubs). Las pruebas de integración verifican la interacción entre varios componentes. Las pruebas E2E/UI verifican el sistema completo desde la perspectiva del usuario.

La Pirámide de Pruebas es una metáfora visual que ayuda a los equipos a tomar decisiones estratégicas sobre cómo distribuir sus esfuerzos de testing automatizado. El objetivo es lograr una suite de pruebas que sea a la vez efectiva para encontrar bugs y eficiente en términos de ejecución y mantenimiento. Una gran cantidad de pruebas unitarias rápidas permite a los desarrolladores obtener retroalimentación temprana y localizar fallos con precisión. Un número menor de pruebas de integración asegura que los componentes colaboran correctamente. Las pocas pruebas E2E/UI, aunque valiosas para verificar flujos críticos del usuario, deben ser limitadas debido a su lentitud, fragilidad y alto costo de mantenimiento.[37] Ignorar la forma de la pirámide (ej. tener demasiadas pruebas E2E y pocas unitarias, resultando en un "cono de helado de pruebas") lleva a suites de pruebas lentas, inestables y difíciles de mantener.

- **Representación de la Pirámide de Pruebas:**

| Capa de Prueba | Características Clave | Foco Principal | Cantidad Relativa | Velocidad |
|--------------------|---------------------------------------------------------------------------------------|-------------------------------------------------------|-------------------|-----------|
| **Pruebas UI/E2E** | Lentas, frágiles, costosas de escribir/mantener, alto nivel de integración. | Flujos de usuario completos a través de la UI. | Muy Pocas | Lenta |
| **Pruebas de Servicio/Integración** | Velocidad media, prueban interacciones entre componentes/servicios, pueden requerir entorno. | APIs, interacciones entre módulos, BBDD. | Algunas | Media |
| **Pruebas Unitarias** | Muy rápidas, aisladas, baratas de escribir/mantener, feedback rápido, precisas. | Lógica de funciones/clases individuales, algoritmos. | Muchas | Rápida |

- **Directivas:**
    - Escribe muchas pruebas unitarias pequeñas y rápidas.
    - Escribe algunas pruebas de integración más generales para verificar la colaboración entre componentes.
    - Escribe muy pocas pruebas E2E que cubran los flujos de usuario más críticos.
    - Empuja la lógica de prueba lo más abajo posible en la pirámide. Si algo puede ser probado adecuadamente con una prueba unitaria, no escribas una prueba de integración para ello.

Importancia de las Pruebas (Unitarias, Integración, E2E)

Nombre del Archivo: testing-importance-of-tests
Tipo de Regla: Always
Descripción: "Destaca la necesidad de escribir pruebas (unitarias, de integración, E2E) para verificar la corrección del código, prevenir regresiones, aumentar la confianza para refactorizar y añadir nuevas funcionalidades."
Contenido de la Regla:
Fragmento de código

# Importancia de las Pruebas: Construir con Confianza

- **Verificación de Correctitud:** Las pruebas ayudan a asegurar que el código se comporta como se espera bajo diversas condiciones.
- **Prevención de Regresiones:** Una suite de pruebas robusta actúa como una red de seguridad, detectando si los nuevos cambios rompen funcionalidades existentes.
- **Confianza para Refactorizar:** Con buenas pruebas, los desarrolladores pueden refactorizar y mejorar la estructura del código con mayor confianza, sabiendo que las pruebas alertarán sobre cualquier comportamiento alterado.[36]
- **Documentación Viva:** Las pruebas bien escritas sirven como una forma de documentación ejecutable, mostrando cómo se supone que debe usarse el código y cuáles son sus comportamientos esperados.
- **Facilitar Cambios y Evolución:** Las pruebas reducen el miedo a realizar cambios en el código base, lo que es esencial para la evolución y el mantenimiento a largo plazo del software.[36]
- **Detección Temprana de Defectos:** "Las pruebas muestran la presencia de defectos, no su ausencia".[38] Cuanto antes se detecte un defecto, más barato y fácil es corregirlo.
- **Cultura de Calidad:** Fomentar una cultura donde las pruebas son una parte integral del proceso de desarrollo ("cualquier código no trivial sin pruebas se considera roto" [36]) lleva a software de mayor calidad.

Las pruebas no son una carga, sino una inversión en la calidad y estabilidad del software. Un conjunto completo de pruebas automatizadas reduce drásticamente la cantidad de errores que llegan a producción. Pero el mayor beneficio no es solo evitar bugs en producción, sino la confianza que otorgan para realizar cambios en el sistema. Las bases de código antiguas sin pruebas a menudo son lugares temidos, donde los desarrolladores temen modificar código funcional. Con pruebas auto-verificables, el panorama es diferente: los desarrolladores confían en que pueden limpiar el código de forma segura, porque si cometen un error, el "detector de bugs" (la suite de pruebas) se activará.[36]

- **Tipos de Pruebas y su Rol:**
    - **Pruebas Unitarias:** Verifican la unidad más pequeña de código (función, método, clase) de forma aislada.
    - **Pruebas de Integración:** Verifican la interacción entre dos o más componentes del sistema.
    - **Pruebas de Extremo a Extremo (E2E):** Verifican flujos completos del sistema desde la perspectiva del usuario, a menudo a través de la UI.
