---
description: 
globs: 
alwaysApply: false
---
# Documentación de APIs: Guía para Consumidores

- **Descripción General:** Proporciona una introducción a la API, su propósito y cómo autenticarse.
- **Detalle de Endpoints:** Para cada endpoint, documenta:
    - Método HTTP (GET, POST, PUT, DELETE, etc.) y URL.
    - Parámetros (de ruta, query, cuerpo de la solicitud), incluyendo sus tipos, si son requeridos y descripciones.
    - Formato del cuerpo de la solicitud (ej. JSON) y un ejemplo.
    - Formato del cuerpo de la respuesta para casos de éxito y error, y ejemplos.
    - Posibles códigos de estado HTTP y su significado en el contexto de la API.[17]
- **Ejemplos de Código:** Incluye ejemplos de cómo realizar peticiones en lenguajes comunes o con herramientas como cURL.[17]
- **Manejo de Errores:** Explica cómo la API reporta errores y qué significan los diferentes códigos o mensajes de error.
- **Versionado y Changelog:** Describe la estrategia de versionado de la API y mantén un changelog público que registre los cambios, especialmente los cambios que rompen la compatibilidad.[17]
- **Usar Herramientas Estándar:** Considera el uso de especificaciones como OpenAPI (anteriormente Swagger) para definir y documentar APIs. Estas herramientas pueden generar documentación interactiva y SDKs de cliente.[17, 18]
- **Mantener Actualizada:** La documentación de la API debe ser tratada como parte del producto y mantenerse actualizada con cada cambio en la API.[18]

La documentación de API es crítica para sus consumidores, ya sean equipos internos o desarrolladores externos. Una documentación clara y precisa reduce la curva de aprendizaje, facilita la integración, minimiza los errores de implementación por parte de los clientes y disminuye la carga de soporte para el equipo que mantiene la API. Es la "tarjeta de presentación" de un servicio.

- **Ejemplo (Conceptual - Fragmento de documentación OpenAPI):**
  ```yaml
  # openapi: 3.0.0
  # info:
  #   title: API de Tareas
  #   version: v1
  # paths:
  #   /tareas:
  #     get:
  #       summary: Obtener lista de tareas
  #       responses:
  #         '200':
  #           description: Lista de tareas obtenida exitosamente
  #           content:
  #             application/json:
  #               schema:
  #                 type: array
  #                 items:
  #                   type: object
  #                   properties:
  #                     id:
  #                       type: string
  #                       example: "task_123"
  #                     descripcion:
  #                       type: string
  #                       example: "Comprar leche"
  #                     completada:
  #                       type: boolean
  #                       example: false