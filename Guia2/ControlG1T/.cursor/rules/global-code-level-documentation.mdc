---
description: Requiere documentar funciones públicas, clases y módulos, explicando su propósito, parámetros, valores de retorno y cualquier comportamiento no obvio, siguiendo las convenciones del lenguaje
globs: 
alwaysApply: false
---
# Documentación de Código: Claridad en la Implementación

- **Documentar Entidades Públicas:** Todas las funciones, métodos, clases y módulos que forman parte de la interfaz pública de un componente deben ser documentados.
- **Explicar Propósito y Uso:** La documentación debe aclarar qué hace la entidad, cómo usarla (parámetros, tipos esperados) y qué devuelve.[16]
- **Señalar Suposiciones y Efectos Secundarios:** Documenta cualquier suposición importante que haga el código o cualquier efecto secundario que pueda tener.
- **Seguir Convenciones del Lenguaje:** Utiliza las herramientas y formatos de documentación estándar del lenguaje (ej. Javadoc para Java, Docstrings para Python, XML Docs para C#, JSDoc para JavaScript/TypeScript).
- **Incluir Ejemplos Simples:** Cuando sea apropiado, incluye ejemplos breves de cómo usar la función o clase.
- **"Escribir Mientras se Codifica":** La documentación es más precisa y menos onerosa si se escribe junto con el código, en lugar de dejarla como una tarea para el final.[16]

Una buena documentación a nivel de código facilita enormemente el uso de APIs y la comprensión de la lógica interna sin necesidad de leer y descifrar cada línea de la implementación. Sirve como un contrato para los usuarios del código y como una referencia para los futuros mantenedores. Las herramientas pueden a menudo generar documentación externa a partir de estos comentarios/docstrings, haciéndolos aún más valiosos.

- **Ejemplo (Python Docstring - Google Style):**
  ```python
  def calcular_descuento(precio_original: float, porcentaje_descuento: float) -> float:
      """Calcula el precio final después de aplicar un descuento.

      Args:
          precio_original (float): El precio base del artículo.
          porcentaje_descuento (float): El descuento a aplicar, como un valor
                                       entre 0.0 y 1.0 (ej. 0.10 para 10%).

      Returns:
          float: El precio final después del descuento.

      Raises:
          ValueError: Si el precio_original es negativo o si el
                      porcentaje_descuento no está entre 0 y 1.
      """
      if precio_original < 0:
          raise ValueError("El precio original no puede ser negativo.")
      if not (0 <= porcentaje_descuento <= 1.0):
          raise ValueError("El porcentaje de descuento debe estar entre 0.0 y 1.0.")
      
      descuento = precio_original * porcentaje_descuento
      return precio_original - descuento