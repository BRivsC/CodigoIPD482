---
description: Fomenta la escritura de código que aproveche las características y filosofías de Python (ser 'Pythonic'), resultando en código más conciso, legible y eficiente.
globs: 
alwaysApply: false
---
# Código Pythonic e Idiomático

- **Aprovechar Características del Lenguaje:** Utiliza las construcciones idiomáticas de Python que hacen el código más expresivo y eficiente.
    - **Comprensiones (List/Dict/Set Comprehensions):** Prefiere comprensiones para crear listas, diccionarios o conjuntos de forma concisa a partir de iterables, en lugar de bucles `for` explícitos con `append`.
    - **Generadores:** Usa expresiones generadoras (`(x for x in iterable)`) o funciones generadoras (`yield`) para trabajar con secuencias grandes de datos de manera eficiente en memoria.
    - **Decoradores:** Entiende y utiliza decoradores (`@my_decorator`) para modificar o extender el comportamiento de funciones y métodos de forma declarativa.
    - **Context Managers (`with` statement):** Usa el statement `with` para la gestión de recursos (archivos, conexiones de red, locks) para asegurar que se liberen correctamente (implementando `__enter__` y `__exit__`).
- **Iteración Pythonic:**
    - Itera directamente sobre los elementos de un iterable en lugar de usar índices (ej. `for item in my_list:` en lugar de `for i in range(len(my_list)): item = my_list[i]`).
    - Usa `enumerate()` si necesitas tanto el índice como el elemento.
    - Usa `zip()` para iterar sobre múltiples iterables en paralelo.
- **Manejo de Cadenas:**
    - Usa f-strings (formatted string literals, ej. `f"Hola, {nombre}"`) para la interpolación de cadenas (Python 3.6+). Son más legibles y eficientes que `str.format()` o el operador `%`.
    - Usa el método `str.join()` para concatenar una secuencia de cadenas de forma eficiente.
- **Desempaquetado (Unpacking):** Aprovecha el desempaquetado de tuplas y listas para asignaciones múltiples (ej. `x, y = (1, 2)`). Usa `*args` y `**kwargs` para funciones con un número variable de argumentos.
- **EAFP vs. LBYL:**
    - **EAFP (Easier to Ask for Forgiveness than Permission):** En Python, a menudo es idiomático intentar una operación y capturar la excepción si falla (ej. `try...except KeyError` al acceder a un diccionario).
    - **LBYL (Look Before You Leap):** Comprobar precondiciones antes de actuar (ej. `if key in my_dict:`).
    - Elige el enfoque que resulte más claro y menos verboso para el caso específico. EAFP suele ser preferido si se espera que la operación tenga éxito la mayoría de las veces.
- **Dunder Methods (Métodos Mágicos):** Entiende y utiliza correctamente los métodos especiales (ej. `__init__`, `__str__`, `__repr__`, `__len__`, `__getitem__`) para que tus objetos se integren bien con las características del lenguaje.

Escribir código "Pythonic" no se trata solo de seguir la sintaxis, sino de abrazar la filosofía del lenguaje, que valora la legibilidad, la simplicidad y la expresividad. El código idiomático suele ser más fácil de leer y entender para otros desarrolladores de Python, y a menudo también es más eficiente porque aprovecha las optimizaciones internas del lenguaje.

- **Ejemplo (Comprensión de listas vs. bucle):**
  ```python
  numeros = 

  # No tan Pythonic (usando bucle)
  cuadrados_bucle =
  for n in numeros:
      if n % 2 == 0: # Solo pares
          cuadrados_bucle.append(n * n)

  # Pythonic (usando comprensión de lista)
  cuadrados_comprension = [n * n for n in numeros if n % 2 == 0]

  print(cuadrados_bucle)        # Output: 
  print(cuadrados_comprension) # Output: 

    Ejemplo (Context Manager):
    Python

# No tan Pythonic (manejo manual de archivos)
f = open("mi_archivo.txt", "w")
try:
    f.write("Hola Mundo")
finally:
    f.close() # Es crucial cerrar el archivo

# Pythonic (usando 'with' statement)
with open("mi_archivo.txt", "w") as f:
    f.write("Hola Mundo")
# El archivo se cierra automáticamente al salir del bloque 'with', incluso si ocurren errores.
