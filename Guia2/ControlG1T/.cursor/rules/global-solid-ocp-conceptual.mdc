---
description: Establece que las entidades de software deben estar abiertas para la extensión (añadir nuevo comportamiento) pero cerradas para la modificación (sin alterar código existente y estable).
globs: 
alwaysApply: false
---
- **Abierto a Extensión:** Debe ser posible añadir nuevas funcionalidades o comportamientos al sistema sin necesidad de cambiar el código fuente existente de los módulos o funciones ya probados y estables.[6]
- **Cerrado a Modificación:** Una vez que un módulo o función ha sido desarrollado y probado, su código interno no debería necesitar ser modificado para acomodar nuevos tipos de comportamiento.
- **Mecanismos:** Esto se logra a menudo mediante el uso de abstracciones (como interfaces o clases base en POO), polimorfismo, composición, o funciones de orden superior y composición de funciones en programación funcional.[7, 8]

La principal ventaja de adherirse al OCP es la reducción del riesgo. Modificar código existente, especialmente si es complejo y ha sido probado exhaustivamente, siempre conlleva el riesgo de introducir nuevos errores (regresiones) en funcionalidades que antes operaban correctamente. Al permitir extensiones sin modificar el código base, se preserva la estabilidad de las partes ya funcionales del sistema. Esto es crucial para la mantenibilidad a largo plazo y para construir sistemas robustos que puedan evolucionar de manera segura.

- **Ejemplo (Conceptual - Procesamiento de diferentes tipos):**
  ```python
  # Antes de OCP (Modificación necesaria para nuevos tipos de forma)
  class CalculadorArea:
      def calcular(self, forma):
          if isinstance(forma, Circulo):
              return 3.14159 * forma.radio ** 2
          elif isinstance(forma, Rectangulo):
              return forma.ancho * forma.alto
          # Si se añade un Triangulo, hay que modificar esta clase.

  # Después de OCP (Abierto a extensión mediante una interfaz/abstracción)
  from abc import ABC, abstractmethod

  class Forma(ABC):
      @abstractmethod
      def area(self):
          pass

  class Circulo(Forma):
      def __init__(self, radio):
          self.radio = radio
      def area(self):
          return 3.14159 * self.radio ** 2

  class Rectangulo(Forma):
      def __init__(self, ancho, alto):
          self.ancho = ancho
          self.alto = alto
      def area(self):
          return self.ancho * self.alto

  # Se puede añadir Triangulo(Forma) sin modificar CalculadorAreaMejorado.
  class Triangulo(Forma):
      def __init__(self, base, altura):
          self.base = base
          self.altura = altura
      def area(self):
          return 0.5 * self.base * self.altura

  class CalculadorAreaMejorado:
      def calcular_total(self, formas: list[Forma]):
          return sum(f.area() for f in formas)