---
description: Indica que los objetos (o funciones/módulos) de un tipo derivado deben poder sustituir a los objetos de su tipo base sin alterar la corrección del programa.
globs: 
alwaysApply: false
---
# LSP Conceptual: Principio de Sustitución de Liskov

- **Sustituibilidad:** Si un módulo S es un subtipo (o una implementación específica) de un módulo T, entonces las instancias de T deberían poder ser reemplazadas por instancias de S sin que el programa falle o se comporte de manera inesperada.[6, 9]
- **Consistencia de Comportamiento:** Las implementaciones específicas (subtipos) deben adherirse al contrato definido por la abstracción base. No deben requerir precondiciones más fuertes ni garantizar poscondiciones más débiles.
- **Aplicación Funcional:** En programación funcional, esto se traduce en que diferentes implementaciones de una función o transformación de datos con la misma "firma" o interfaz esperada deben comportarse de manera consistente y predecible.[8]

El LSP es fundamental para asegurar un polimorfismo fiable y la intercambiabilidad de componentes. Cuando se cumple este principio, el código cliente que opera con una abstracción (tipo base) puede confiar en que cualquier implementación concreta de esa abstracción se comportará según lo esperado. Esto permite construir sistemas más flexibles y extensibles, donde nuevas implementaciones pueden ser añadidas o intercambiadas sin temor a romper la lógica existente que depende de la abstracción común. La violación del LSP a menudo conduce a la necesidad de comprobaciones de tipo (`if isinstance(...)`) en el código cliente para manejar casos especiales, lo cual es una señal de un diseño frágil.

- **Ejemplo (Conceptual - POO, pero la idea aplica):**
  ```python
  # Violación de LSP (un PatoDeGoma no se comporta como un Pato real en 'hacer_sonido_y_volar')
  class Pato:
      def hacer_sonido(self):
          return "Cuac!"
      def volar(self):
          print("Volando...")

  class PatoDeGoma(Pato):
      def hacer_sonido(self):
          return "Squeak!"
      def volar(self):
          # Un pato de goma no vuela, viola la expectativa de 'volar' del Pato base.
          raise NotImplementedError("Los patos de goma no vuelan")

  def accion_pato(pato: Pato):
      print(pato.hacer_sonido())
      try:
          pato.volar() # Esto fallará para PatoDeGoma
      except NotImplementedError as e:
          print(e)

  # LSP Correcto:
  # Se podría separar la capacidad de volar en otra interfaz/abstracción.
  # O PatoDeGoma no debería heredar de Pato si no puede cumplir su contrato.